# Os Verbos do HTTP 

#GET -> BUSCA RECURSO 
#   -> CACHE


#POST -> CRIA NOVO RECURSO

#PUT -> ATUALIZA TODOS OS RECURSOS 

#PATH -> ATUALIZA PARTE DOS RECURSOS 

#DELETE -> DELETA UM RECURSO 

#--==================================--#

#ESTRUTURA HTML 

#HEADER -> USADOS PARA TAGS DE INFORMAÇÃO SOBRE
#O SITE, APLICAÇÃO DE ESTILOS CSS E ETC.

#BODY -> CONTEÚDO DO SITE QUE É APRESENTADO AO
#CLIENTE.

#FOOTER -> GERALMENTE USADO PARA CARREGAMENTO DE SCRIPTS JAVASCRIPT E APRESENTAÇÃO DE DADOS DE RODAPÉ


<!DOCTYPE html>
<html>

<head>
	
	<meta charset="utf-8">
	<title>Geek University - HTML 1</title>

</head>


<body>
		<p>Programação Web com Django Freamwork</p>
</body>

<html>


--=======================================================================--
--============================ Parte 2 ==================================--


<!DOCTYPE html>
<html>
<head>
	<title>Geek university - html 2</title>
	<meta charset="utf-8">
</head>
	<h1>Cabeçalho Nível 1: h1</h1>
	<h2>Cabeçalho Nível 2: h2</h2>
	<h3>Cabeçalho Nível 3: h3</h3>
	<h4>Cabeçalho Nível 4: h4</h4>
	<h5>Cabeçalho Nível 5: h5</h5>
	<h6>Cabeçalho Nível 6: h6</h6>

	<div>
		Seção de <strong>Conteúdo</strong>: div/strong
	</div>

	<blockquote>Evolua seu lado Geek!: Blockquote</blockquote>


	<span>Lista <em>Ordenada</em> span/em/ol/li<span>
	
	<ol>
		
		<li>Python</li>
		<li>Django</li>
		<li>HTML</li>

	</ol>


	<span>Lista Não Ordenada<em>Ordenada</em> span/em/ol/li<span>

	<ul>
		
		<li>Python</li>
		<li>Django</li>
		<li>HTML</li>

	</ul>

	<a href="# Os Verbos do HTTP.html">Página 1 Original</a>

    <a href="Página 2.html" target= _blank>Página 1 Nova_Aba</a>


	<img src="Rubik.jfif" alt="Cubo"> 

<body>

</body>
</html>


--====================================--
--============== CSS =================--

/* Não Recomendado */

<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<title>Geek University - HTML 1</title>
	<style >
		body {

			background: navy;
			color: #ffffff;
		}
		
	</style>

</head>
<body>
		<p>Programação Web com Django Freamwork</p>
</body>

<html>


--========================================================--
--=================== CSS Recomendado ====================--

<!DOCTYPE html>
<html>
<head>
	<title>Geek University - CSS Externo</title>
	<meta charset="utf-8">
	<link rel="stylesheet" type="text/css" href="Estilos.css"> /* Busca CSS no arquivo "Estilos.css" */
</head>
<body>

	<p>Programação Web com Django Freamwork</p>

</body>
</html>


/* "Estilos.css" */

body{

	 background: red;
	 color: #E0FFFF;
}

--=======================================================--
--==================== CSS por tag ======================--

/* html */

<!DOCTYPE html>
<!DOCTYPE html>
<html>
<head>
	<title>Geek University - Uso CSS - Tag</title>
	<meta charset="utf-8">
	<link rel="stylesheet" type="text/css" href="CSS Teste1.css">
</head>
<body>
	<p>Evolua seu lado Geek</p>

	<span>Outro texto qualquer</span>

	<p>Outro Paragrafo</p>
	
</body>
</html>

/* CSS Teste1.css */

p {
	color: red;
	font-weight: bold;

}



--=========================================================--
--==================== CSS por Class ======================--

<!DOCTYPE html>
<html>
<head>
	<title>Geek University - CSS por Class </title>
	<meta charset="utf-8">
	<link rel="stylesheet" type="text/css" href="CSS por Class.css">
</head>
<body>
		<p class="verde">Evolua seu lado Geek</p>

		<span class="verde">Outro Texto Qualquer </span>

		<p class="verde" > Outro paragrafo qualquer</p>
</body>
</html>


/* CSS por Class */

p {
	color: red;
	font-weight: bold;
}

.verde {

	color: green;
	font-size: 42px;

}



--=========================================================--
--==================== CSS por id =========================--



<!DOCTYPE html>
<html>
<head>
	<title>Geek University - CSS po id</title>
	<meta charset="utf-8">
	<link rel="stylesheet" type="text/css" href="CSS por id.css">
</head>
<body>
		<p>Evolua seu lado Geek</p>

		<span class="verde">Outro Texto</span>

		<p id="p2" class="verde">Outro Parágrafo</p>

</body>
</html>


/* CSS por id */

p {                               /* Cor do parágrafo e fonte Negrito*/

	color: red;
	font-weight: bold;
}

.verde {                          /* CSS utilizando Class, tamanho da fonte */

	color: green;
	font-size: 42px;

}

#p2 {                              /* CSS Utilizando id, Identificador, neste caso underline */

	text-decoration: underline;

}



--===============================================--
--============== INICIO JavaScript ==============--


<!DOCTYPE html>
<html>
<head>
	<title>Geek University - JavaScript</title>
	<meta charset="utf-8">
</head>
<body>

		<center>

			<h1>Geek University</h1>
			<button onclick="gritar();">Clique em mim</button>

		</center>

		<script type="text/javascript" src="script.js"></script>


</body>
</html>


/* Script.js */

function gritar() {

		alert("Aaaaaaaaaaaaaaaaaaaaaaaah!");
}


--===========================================================--
--============== Caixa de perguntas JavaScript ==============--


<!DOCTYPE html>
<html>
<head>
	<title>Geek University - Caixa com perguntas</title>
	<meta charset="utf-8">

</head>
<body>
		<center>
			
				<h1>Geek University</h1>
				<button onclick="gritar();">Clique em mim</button>
				
				<br><br>
				<button onclick="perguntar();">Questionário</button>
				
		</center>

		<script type="text/javascript" src="script2.js"></script>

</body>
</html>


/* scripts2.js */

function gritar(){

	alert("Ahhhhhh!");

}

function perguntar() {
	var nome;
	nome = prompt("Qual é o seu nome ?");
	alert("Olá " + nome);

}

--========================================================================--
--============== Caixa de perguntas + Incremento JavaScript ==============--


<!DOCTYPE html>
<html>
<head>
	<title>Geek University - Caixa com perguntas e muda texto</title>
	<meta charset="utf-8">
</head>
<body>
			<center>
					<h1>Geek University</h1>
					<button onclick="gritar();">Clique em mim</button>

					<br><br>
					<button onclick="perguntar();">Questionário</button>

					<br><br>
					<button onclick="mudar_texto();">Muda Texto</button>

					<br><br>
					<button onclick="incrementar();">Incrementar</button>
					<p id="p1">0</p>

			</center>

			<script type="text/javascript" src="scripts3.js"></script>
</body>
</html>


/* scripts3.js */


function gritar(){

	alert("Aaaaaaahhh!!");

}

function perguntar(){

	var nome;
	nome = prompt("Qual é o seu nome?");
	alert("Olá " + nome);

}

function mudar_texto(){

	var h1 = document.getElementsByTagName("h1");

	if (h1[0].innerText == "Geek University")

	{
		h1[0].innerText = "Evolua seu lado Geek!!";

	}else
		{
   
        h1[0].innerText = "Geek University";
    }
}


function incrementar(){

	var p1 = document.getElementById("p1");

	p1.innerText = parseInt(p1.innerText) + 1; // Converte texto em numero inteiro e incrementa + 1

}



--=================== Bootstrap Freamwork =======================--

<!DOCTYPE html>
<html>
<head>
	<title>Geek University</title>
	<meta charset="utf-8">
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
	
</head>
<body>

	<div class="container">
		<h1>Geek University</h1>

	</div>


<br><br>

	<div class="container">
		
			<div class="alert alert-primary" role="alert">
			  A simple primary alert—check it out!
			</div>
			<div class="alert alert-secondary" role="alert">
			  A simple secondary alert—check it out!
			</div>
			<div class="alert alert-success" role="alert">
			  A simple success alert—check it out!
			</div>
			<div class="alert alert-danger" role="alert">
			  A simple danger alert—check it out!
			</div>
			<div class="alert alert-warning" role="alert">
			  A simple warning alert—check it out!
			</div>
			<div class="alert alert-info" role="alert">
			  A simple info alert—check it out!
			</div>
			<div class="alert alert-light" role="alert">
			  A simple light alert—check it out!
			</div>
			<div class="alert alert-dark" role="alert">
			  A simple dark alert—check it out!
			</div>

	</div>

<div class="container">


		<button type="button" class="btn btn-primary">Primary</button>
		<button type="button" class="btn btn-secondary">Secondary</button>
		<button type="button" class="btn btn-success">Success</button>
		<button type="button" class="btn btn-danger">Danger</button>
		<button type="button" class="btn btn-warning">Warning</button>
		<button type="button" class="btn btn-info">Info</button>
		<button type="button" class="btn btn-light">Light</button>
		<button type="button" class="btn btn-dark">Dark</button>
		<button type="button" class="btn btn-link">Link</button>


</div>	

	<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>

</body>
</html>


--==================== Django Freamwork ========================--

# Instalando o Django 

pip install django 


# Criando diretório para salvar as bibliotecas utilizadas no projeto


pip freeze > requirements.txt 



#Criando PROJETO Djando 

django-admin startproject "Django1" .  # Cria projeto Django com o gerenciado manage.py


#Criar uma APLICAÇÃO Django

django-admin startapp core . 	  # Cria aplicação Django Core, porque significa nucleo

# Toda vez que criar uma aplicação..Ir em settings.py -> INSTALLED_APPS e adicionar a aplicação


# Application definition

settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core', <----------
]


# Criar um diretório de templates, eu tenho que irformar que o diretório para os templates será chamdo templates

	TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'], <------
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



# Executar a aplicação 

->  python manage.py runserver

# Entrar link 

http://127.0.0.1:8000/


---====================================================---
---=============== Criando páginas ====================---

# Criando uma View no Core

from django.shortcuts import render


# Criando View página Index(Pagina inicial)

def index(request):
	return render(request, 'index.html')


# Criando View página de contato 


def contato(request):
	return render(request, 'contato.html')


---====================================================---
---================= Criando Rotas ====================---


 """Django1 URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path

--============= Importando de forma NÃO IDEAL ================--

from core.view import index  # Da aplicação "core" importar a função "index"
from core.view import contato # Importando a View contato da View


# Criando rotas

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', index),
    path('/contato', contato),
]


--============= Importando de forma IDEAL ================--

-- views (core)

from django.shortcuts import render


# Criando View Página inicial (index) 

def index(request):
    return render(request, 'index.html')


# Criando View Pagina de contato

def contato(request):
    return render(request, 'contato.html')


--=========== Criando Rotas ==============--

-- Urls (Projeto Django1) # 	


from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls'))

]


-- Urls na aplicação (core)

# Tudo o que for inserido na aplicaçao vai para é criada Rota no projeto (Django1)

from django.urls import path
from .views import index, contato


urlpatterns = [

path('', index),
path('contato', contato),



]


-- =============== Criar uma Pasta de templates na aplicação (core) ================ --

- new folder como "templates"

-============ Criando Views =============-

-- Arquivo views.py da aplicação "core"


from django.shortcuts import render


# Criando View Página inicial (index) 

def index(request):
    context = {
        'curso': 'Programação com Django Freamwork',
        'outro': 'Django é Massa!!'

    }
    return render(request, 'index.html',context)


# Criando View Pagina de contato

def contato(request):
    return render(request, 'contato.html')




# Criar os Arquivos Index e contato como html

-- Index --

<!DOCTYPE html>
<html lang="pt-br">


<head>

        <meta charset="UTF-8">
        <title>Django1 - index</title>

</head>

<body>
    
    <h1>Index</h1>
    
    <h2>{{curso }}</h2>

    <p>{{outro}}</p>
</body>
</html>

--===================================--

-- Contato -- 

<!DOCTYPE html>
<html lang="pt-br">

<head>
        <meta charset="UTF-8">
        <title>title</title>
</head>


<body>
        <h1>Contato</h1>
       
</body>


</html>


--=========== Criando o modelo de dados do projeto ============--

-- Arquivo models.py da aplicação "core"


from django.db import models

# Criando o modelo do Projeto 

# Tabela Produto 

class Produto(models.Model):
    nome = models.CharField('Nome', max_length=100)
    preco = models.DecimalField('Preço', decimal_places=2, max_digits=8) # 2 casas decimais e no máximo 10 dpigitos
    estoque = models.IntegerField('Quantidade de Estoque')



--============ Criando a Migration do projeto ==============-

# É uma forma de gerenciar o histórico de modificação do banco de dados 

# Ele le todas as aplicações do projeto, somente se as apps forem configuradas no settings e 
# cria a migration

# Código
python manage.py makemigrations 


-- Cria a tabela do modelo do banco de dados do projeto 


 # Executando a migration

 pyhton manage.py migrate 

 # Output

# Generated by Django 3.1.6 on 2021-02-27 04:03

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Produto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('preco', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Preço')),
                ('estoque', models.IntegerField(verbose_name='Quantidade de Estoque')),
            ],
        ),
    ]


--================ Criando a tabela Clientes =================--

# Código
python manage.py makemigrations 


-- Cria a tabela do modelo do banco de dados do projeto 

# Criando tabela Client

class Cliente(models.Model):
    nome = models.CharField('Nome', max_length=100)
    sobrenome = models.CharField('Sobrenome', max_length=100)
    email = models.EmailField('Email', max_length=100)



# Código
python manage.py makemigrations 

# Generated by Django 3.1.6 on 2021-02-27 04:37

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('sobrenome', models.CharField(max_length=100, verbose_name='Sobrenome')),
                ('email', models.EmailField(max_length=100, verbose_name='Email')),
            ],
        ),
    ]



--================== Criando usuário administrativo =======================--

python manage.py createsuperuser


Usuário (leave blank to use 'mateus'): @MendesDSilva
Endereço de email: mendonsa_23@hotmail.com
Password: 
Password (again):
Password:
Password (again):
A senha é muito parecida com endereço de email
Bypass password validation and create user anyway? [y/N]: gibsonsx
Password:
Password (again):
Superuser created successfully.


--============ Criando Opções na area administrativa ============--

from django.contrib import admin

from .models import Produto, Cliente

admin.site.register(Produto)
admin.site.register(Cliente)


--============ Nomeando os produtos ==============--

# Tabela Produto 

models.py

class Produto(models.Model):
    nome = models.CharField('Nome', max_length=100)
    preco = models.DecimalField('Preço', decimal_places=2, max_digits=8) # 2 casas decimais e no máximo 10 dpigitos
    estoque = models.IntegerField('Quantidade de Estoque')

    def __str__(self):         
        return self.nome        <- Define como o nome do produto

# Criando tabela Cliente

class Cliente(models.Model):
    nome = models.CharField('Nome', max_length=100)
    sobrenome = models.CharField('Sobrenome', max_length=100)
    email = models.EmailField('Email', max_length=100)


    def __str__(self):
    	return f'{self.nome}  {self.sobrenome}'




--============ Adaptando Produto e Cliente no Admin ============-


from django.contrib import admin

from .models import Produto, Cliente


# Mostra um display com o nome, preço e estoque do produto

class ProdutoAdmin(admin.ModelAdmin):
    list_display = ('nome','preco','estoque')

# Mostra o nome e E-mail do Cliente

class ClienteAdmin(admin.ModelAdmin):
    list_display = ('nome','email')

admin.site.register(Produto, ProdutoAdmin)
admin.site.register(Cliente, ClienteAdmin)


--============== Alterando a Chamada da Seção adm pela rota =============-

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('paineladm', admin.site.urls),    <---- Alterado de "adm/" para "paineladm"
    path('', include('core.urls'))

]


--============== Inserindo dados através do Shell ====================--

# Código 

python manage.py Shell

# Inserindo dados na tabela de protudos 

from core.models import Produto 

Produto = Produto(nome='Atari 2600', preco=199.67, estoque=100)
Produto.save()

# Inserindo dados na tabela de clientes

from core.models import Cliente

Cliente = Cliente(nome="Anjelina", sobrenome="Jolie",email="anjelinajolie@gmail.com")
Cliente.save()

# Alterando dados 

Cliente.nome = 'Maria'
Cliente.save()

Cliente.id
Cliente.pk

# Deletando Cliente

Cliente.delete()

--====== Mostrando dados do banco de dados no template =======--
# Analisando todas as cláusulas 

from core.models import Produto

dir(Produto.objects)

out:

Out[10]: 

['__class__',
 '__class_getitem__',
 '__delattr__',
 '__dict__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__le__',
 '__lt__',
 '__module__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__slotnames__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 '_constructor_args',
 '_db',
 '_get_queryset_methods',
 '_hints',
 '_insert',
 '_queryset_class',
 '_set_creation_counter',
 '_update',
 'aggregate',
 'all',
 'annotate',
 'auto_created',
 'bulk_create',
 'bulk_update',
 'check',
 'complex_filter',
 'contribute_to_class',
 'count',
 'create',
 'creation_counter',
 'dates',
 'datetimes',
 'db',
 'db_manager',
 'deconstruct',
 'defer',
 'difference',
 'distinct',
 'earliest',
 'exclude',
 'exists',
 'explain',
 'extra',
 'filter',
 'first',
 'from_queryset',
 'get',
 'get_or_create',
 'get_queryset',
 'in_bulk',
 'intersection',
 'iterator',
 'last',
 'latest',
 'model',
 'name',
 'none',
 'only',
 'order_by',
 'prefetch_related',
 'raw',
 'reverse',
 'select_for_update',
 'select_related',
 'union',
 'update',
 'update_or_create',
 'use_in_migrations',
 'using',
 'values',
 'values_list']


# Cláusula all() trás todos os dados do banco 

Produt.objects.all()

from core.models import Protudo 

dir(Produto.objects)

Produtos = Produto.objects.all()

Produtos 
Out[5]: <QuerySet [<Produto: Playstation 4>, <Produto: XBox 360>, <Produto: Nintendo Wi>, <Produto: Atari 2600>]>

# Imprimindo dados 

for Produto in produtos:
	print(Produto)

out:

Playstation 4
XBox 360
Nintendo Wi
Atari 2600

--=================

# Cláusula 'count()' Faz a contagem dos valores do banco de dados 

from core.models import Produto

dir(Produto)

dir(Produto.objects)

TotalProdutos = Produto.objects.count()

--================

# Cláusula 'first()' Trás o primeiro produto da lista 

from core.models import Produto

dir(Produto.objects)

PrimeiroProduto = Produto.objects.first()

In [19]: PrimeiroProduto

Out[19]: <Produto: Playstation 4>


--================

# Cláusila 'last()' Trás o último item da tabela 

from core.models import Produto

dir(Produto.objects)

UltimoItem = Produto.objects.last()

In [24]: UltimoItem
Out[24]: <Produto: Atari 2600>


--===============

# Cláusula 'filter()' Filtra um ítem da tabela 


from core.models import Produto 

dir(Produto.objects)

Id1 = Produto.objects.filter(id=1)

In [28]: id1
Out[28]: <QuerySet [<Produto: Playstation 4>]>

















